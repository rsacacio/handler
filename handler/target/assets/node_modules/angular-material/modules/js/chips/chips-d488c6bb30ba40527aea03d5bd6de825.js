(function(A,c,B){function p(a){return{restrict:"E",require:"^?mdChips",compile:function(m,b){m.append(v);return function(m,b,C,f){b.addClass("md-chip");a(b);if(f)c.element(b[0].querySelector(".md-chip-content")).on("blur",function(){f.selectedChip=-1})}}}}function q(a){return{restrict:"A",require:"^mdChips",scope:!1,link:function(b,c,d,k){c.on("click",function(a){b.$apply(function(){k.removeChip(b.$$replacedScope.$index)})});a(function(){c.attr({tabindex:-1,ariaHidden:!0});c.find("button").attr("tabindex",
"-1")})}}}function n(a,b){return{restrict:"EA",terminal:!0,link:function(b,m,c){var e=b.$parent.$mdChipsCtrl,f=e.parent.$new(!1,e.parent);f.$$replacedScope=b;f.$chip=b.$chip;f.$mdChipsCtrl=e;m.html(e.$scope.$eval(c.mdChipTransclude));a(m.contents())(f)},scope:!1}}function b(a,b,c,d,k){this.$timeout=k;this.$mdConstant=b;this.$scope=a;this.parent=a.$parent;this.$log=c;this.$element=d;this.userInputElement=this.userInputNgModelCtrl=this.ngModelCtrl=null;this.items=[];this.selectedChip=-1;this.deleteHint=
"Press delete to remove this chip.";this.deleteButtonLabel="Remove";this.chipBuffer="";this.useMdOnAppend=!1}function r(a,b,c,d,k){return{template:function(a,b){b.$mdUserTemplate=a.clone();return w},require:["mdChips"],restrict:"E",controller:"MdChipsCtrl",controllerAs:"$mdChipsCtrl",bindToController:!0,compile:function(e,f){function l(a){if(f.ngModel)return(a=g[0].querySelector(a))&&a.outerHTML}var g=f.$mdUserTemplate;f.$mdUserTemplate=null;var p=l("md-chips>*[md-chip-remove]")||x,q=l("md-chips>md-chip-template")||
y,s=l("md-chips>md-autocomplete")||l("md-chips>input")||t,n=g.find("md-chip");g[0].querySelector("md-chip-template>*[md-chip-remove]")&&d.warn("invalid placement of md-chip-remove within md-chip-template.");return function(d,e,g,l){b.initOptionalProperties(d,f);a(e);var h=l[0];h.chipContentsTemplate=q;h.chipRemoveTemplate=p;h.chipInputTemplate=s;e.attr({ariaHidden:!0,tabindex:-1}).on("focus",function(){h.onFocus()});f.ngModel&&(h.configureNgModel(e.controller("ngModel")),g.mdOnAppend&&h.useMdOnAppendExpression(),
s!=t&&k(function(){0===s.indexOf("<md-autocomplete")&&h.configureAutocomplete(e.find("md-autocomplete").controller("mdAutocomplete"));h.configureUserInput(e.find("input"))}));if(0<n.length){var r=c(n)(d.$parent);k(function(){e.find("md-chips-wrap").prepend(r)})}}},scope:{readonly:"=readonly",placeholder:"@",secondaryPlaceholder:"@",mdOnAppend:"&",deleteHint:"@",deleteButtonLabel:"@",requireMatch:"=?mdRequireMatch"}}}function g(){this.selectedItem=null;this.searchText=""}function u(a,b){return{template:function(a,
b){return z},restrict:"E",controller:"MdContactChipsCtrl",controllerAs:"$mdContactChipsCtrl",bindToController:!0,compile:function(c,d){return function(c,e,f,g){b.initOptionalProperties(c,d);a(e);e.attr("tabindex","-1")}},scope:{contactQuery:"&mdContacts",placeholder:"@",secondaryPlaceholder:"@",contactName:"@mdContactName",contactImage:"@mdContactImage",contactEmail:"@mdContactEmail",contacts:"=ngModel",requireMatch:"=?mdRequireMatch"}}}c.module("material.components.chips",["material.core","material.components.autocomplete"]);
c.module("material.components.chips").directive("mdChip",p);var v='    <span ng-if="!$mdChipsCtrl.readonly" class="md-visually-hidden">      {{$mdChipsCtrl.deleteHint}}    </span>';p.$inject=["$mdTheming"];c.module("material.components.chips").directive("mdChipRemove",q);q.$inject=["$timeout"];c.module("material.components.chips").directive("mdChipTransclude",n);n.$inject=["$compile","$mdUtil"];c.module("material.components.chips").controller("MdChipsCtrl",b);b.$inject=["$scope","$mdConstant","$log",
"$element","$timeout"];b.prototype.inputKeydown=function(a){var b=this.getChipBuffer();switch(a.keyCode){case this.$mdConstant.KEY_CODE.ENTER:if(this.$scope.requireMatch||!b)break;a.preventDefault();this.appendChip(b);this.resetChipBuffer();break;case this.$mdConstant.KEY_CODE.BACKSPACE:if(b)break;a.stopPropagation();this.items.length&&this.selectAndFocusChipSafe(this.items.length-1)}};b.prototype.chipKeydown=function(a){if(!this.getChipBuffer())switch(a.keyCode){case this.$mdConstant.KEY_CODE.BACKSPACE:case this.$mdConstant.KEY_CODE.DELETE:if(0>
this.selectedChip)break;a.preventDefault();this.removeAndSelectAdjacentChip(this.selectedChip);break;case this.$mdConstant.KEY_CODE.LEFT_ARROW:a.preventDefault();0>this.selectedChip&&(this.selectedChip=this.items.length);this.items.length&&this.selectAndFocusChipSafe(this.selectedChip-1);break;case this.$mdConstant.KEY_CODE.RIGHT_ARROW:a.preventDefault();this.selectAndFocusChipSafe(this.selectedChip+1);break;case this.$mdConstant.KEY_CODE.ESCAPE:case this.$mdConstant.KEY_CODE.TAB:if(0>this.selectedChip)break;
a.preventDefault();this.onFocus()}};b.prototype.getPlaceholder=function(){return this.items.length&&(""==this.secondaryPlaceholder||this.secondaryPlaceholder)?this.placeholder:this.secondaryPlaceholder};b.prototype.removeAndSelectAdjacentChip=function(a){var b=this.getAdjacentChipIndex(a);this.removeChip(a);this.$timeout(c.bind(this,function(){this.selectAndFocusChipSafe(b)}))};b.prototype.resetSelectedChip=function(){this.selectedChip=-1};b.prototype.getAdjacentChipIndex=function(a){var b=this.items.length-
1;return 0==b?-1:a==b?a-1:a};b.prototype.appendChip=function(a){this.items.indexOf(a)+1||(this.useMdOnAppend&&this.mdOnAppend&&(a=this.mdOnAppend({$chip:a})),this.items.push(a))};b.prototype.useMdOnAppendExpression=function(){this.useMdOnAppend=!0};b.prototype.getChipBuffer=function(){return this.userInputElement?this.userInputNgModelCtrl?this.userInputNgModelCtrl.$viewValue:this.userInputElement[0].value:this.chipBuffer};b.prototype.resetChipBuffer=function(){this.userInputElement?this.userInputNgModelCtrl?
(this.userInputNgModelCtrl.$setViewValue(""),this.userInputNgModelCtrl.$render()):this.userInputElement[0].value="":this.chipBuffer=""};b.prototype.removeChip=function(a){this.items.splice(a,1)};b.prototype.removeChipAndFocusInput=function(a){this.removeChip(a);this.onFocus()};b.prototype.selectAndFocusChipSafe=function(a){if(this.items.length){if(a===this.items.length)return this.onFocus();a=Math.max(a,0);a=Math.min(a,this.items.length-1);this.selectChip(a);this.focusChip(a)}else this.selectChip(-1),
this.onFocus()};b.prototype.selectChip=function(a){-1<=a&&a<=this.items.length?this.selectedChip=a:this.$log.warn("Selected Chip index out of bounds; ignoring.")};b.prototype.selectAndFocusChip=function(a){this.selectChip(a);-1!=a&&this.focusChip(a)};b.prototype.focusChip=function(a){this.$element[0].querySelector('md-chip[index="'+a+'"] .md-chip-content').focus()};b.prototype.configureNgModel=function(a){this.ngModelCtrl=a;var b=this;a.$render=function(){b.items=b.ngModelCtrl.$viewValue}};b.prototype.onFocus=
function(){var a=this.$element[0].querySelector("input");a&&a.focus();this.resetSelectedChip()};b.prototype.onInputFocus=function(){this.inputHasFocus=!0;this.resetSelectedChip()};b.prototype.onInputBlur=function(){this.inputHasFocus=!1};b.prototype.configureUserInput=function(a){this.userInputElement=a;var b=a.controller("ngModel");b!=this.ngModelCtrl&&(this.userInputNgModelCtrl=b);var g=this.$scope,d=this;a.attr({tabindex:0}).on("keydown",function(a){g.$apply(c.bind(d,function(){d.inputKeydown(a)}))}).on("focus",
c.bind(d,d.onInputFocus)).on("blur",c.bind(d,d.onInputBlur))};b.prototype.configureAutocomplete=function(a){a.registerSelectedItemWatcher(c.bind(this,function(a){a&&(this.appendChip(a),this.resetChipBuffer())}));this.$element.find("input").on("focus",c.bind(this,this.onInputFocus)).on("blur",c.bind(this,this.onInputBlur))};b.prototype.hasFocus=function(){return this.inputHasFocus||0<=this.selectedChip};c.module("material.components.chips").directive("mdChips",r);var w='      <md-chips-wrap          ng-if="!$mdChipsCtrl.readonly || $mdChipsCtrl.items.length > 0"          ng-keydown="$mdChipsCtrl.chipKeydown($event)"          ng-class="{ \'md-focused\': $mdChipsCtrl.hasFocus() }"          class="md-chips">        <md-chip ng-repeat="$chip in $mdChipsCtrl.items"            index="{{$index}}"            ng-class="{\'md-focused\': $mdChipsCtrl.selectedChip == $index}">          <div class="md-chip-content"              tabindex="-1"              aria-hidden="true"              ng-focus="!$mdChipsCtrl.readonly && $mdChipsCtrl.selectChip($index)"              md-chip-transclude="$mdChipsCtrl.chipContentsTemplate"></div>          <div class="md-chip-remove-container"              md-chip-transclude="$mdChipsCtrl.chipRemoveTemplate"></div>        </md-chip>        <div ng-if="!$mdChipsCtrl.readonly && $mdChipsCtrl.ngModelCtrl"            class="md-chip-input-container"            md-chip-transclude="$mdChipsCtrl.chipInputTemplate"></div>        </div>      </md-chips-wrap>',
t='        <input            tabindex="0"            placeholder="{{$mdChipsCtrl.getPlaceholder()}}"            aria-label="{{$mdChipsCtrl.getPlaceholder()}}"            ng-model="$mdChipsCtrl.chipBuffer"            ng-focus="$mdChipsCtrl.onInputFocus()"            ng-blur="$mdChipsCtrl.onInputBlur()"            ng-keydown="$mdChipsCtrl.inputKeydown($event)">',y="      <span>{{$chip}}</span>",x='      <button          class="md-chip-remove"          ng-if="!$mdChipsCtrl.readonly"          ng-click="$mdChipsCtrl.removeChipAndFocusInput($$replacedScope.$index)"          type="button"          aria-hidden="true"          tabindex="-1">        <md-icon md-svg-icon="md-close"></md-icon>        <span class="md-visually-hidden">          {{$mdChipsCtrl.deleteButtonLabel}}        </span>      </button>';
r.$inject=["$mdTheming","$mdUtil","$compile","$log","$timeout"];c.module("material.components.chips").controller("MdContactChipsCtrl",g);g.prototype.queryContact=function(a){a=this.contactQuery({$query:a});return this.filterSelected?a.filter(c.bind(this,this.filterSelectedContacts)):a};g.prototype.filterSelectedContacts=function(a){return-1==this.contacts.indexOf(a)};c.module("material.components.chips").directive("mdContactChips",u);var z='      <md-chips class="md-contact-chips"          ng-model="$mdContactChipsCtrl.contacts"          md-require-match="$mdContactChipsCtrl.requireMatch"          md-autocomplete-snap>          <md-autocomplete              md-menu-class="md-contact-chips-suggestions"              md-selected-item="$mdContactChipsCtrl.selectedItem"              md-search-text="$mdContactChipsCtrl.searchText"              md-items="item in $mdContactChipsCtrl.queryContact($mdContactChipsCtrl.searchText)"              md-item-text="$mdContactChipsCtrl.mdContactName"              md-no-cache="true"              md-autoselect              placeholder="{{$mdContactChipsCtrl.contacts.length == 0 ?                  $mdContactChipsCtrl.placeholder : $mdContactChipsCtrl.secondaryPlaceholder}}">            <div class="md-contact-suggestion">              <img                   ng-src="{{item[$mdContactChipsCtrl.contactImage]}}"                  alt="{{item[$mdContactChipsCtrl.contactName]}}" />              <span class="md-contact-name" md-highlight-text="$mdContactChipsCtrl.searchText">                {{item[$mdContactChipsCtrl.contactName]}}              </span>              <span class="md-contact-email" >{{item[$mdContactChipsCtrl.contactEmail]}}</span>            </div>          </md-autocomplete>          <md-chip-template>            <div class="md-contact-avatar">              <img                   ng-src="{{$chip[$mdContactChipsCtrl.contactImage]}}"                  alt="{{$chip[$mdContactChipsCtrl.contactName]}}" />            </div>            <div class="md-contact-name">              {{$chip[$mdContactChipsCtrl.contactName]}}            </div>          </md-chip-template>      </md-chips>';
u.$inject=["$mdTheming","$mdUtil"]})(window,window.angular);